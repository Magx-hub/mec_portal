"""
Django settings for mec_portal project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from decouple import config
import dj_database_url
from django.core.management.utils import get_random_secret_key

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Use environment variable for SECRET_KEY in production
SECRET_KEY = config('DJANGO_SECRET_KEY', default=get_random_secret_key())

# Security warning if we're in production but using the default SECRET_KEY
if os.environ.get('DJANGO_PRODUCTION', 'False') == 'True' and 'DJANGO_SECRET_KEY' not in os.environ:
    import warnings
    warnings.warn(
        "SECRET_KEY is being generated on startup in production. "
        "This means it will change with every restart, breaking sessions and CSRF protection. "
        "Set the DJANGO_SECRET_KEY environment variable to a persistent value."
    )

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'
DEBUG = config('DJANGO_DEBUG', default=False, cast=bool)

# Security warning if DEBUG is enabled in production
if os.environ.get('DJANGO_PRODUCTION', 'False') == 'True' and DEBUG:
    import warnings
    warnings.warn(
        "DEBUG is enabled in production mode. This is a security risk. "
        "Set DJANGO_DEBUG=False in your environment variables."
    )

# For production, set this to your domain
# ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')
ALLOWED_HOSTS = config('DJANGO_ALLOWED_HOSTS', default='127.0.0.1,localhost').split(',')

# Security warning if ALLOWED_HOSTS isn't properly configured in production
if os.environ.get('DJANGO_PRODUCTION', 'False') == 'True' and ALLOWED_HOSTS == ['127.0.0.1', 'localhost']:
    import warnings
    warnings.warn(
        "ALLOWED_HOSTS is set to localhost in production mode. "
        "This is insecure. Set DJANGO_ALLOWED_HOSTS environment variable."
    )


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Local apps
    'users',
    'attendance',
    'lessonplans',
    # Third-party apps
    'crispy_forms',
    'widget_tweaks',
    'formtools',
    'crispy_tailwind',
    'tailwind',
    'theme',
    'django_browser_reload',
    'pwa',
    'axes',  # For login rate limiting
    'csp',  # For Content Security Policy headers (install with: pip install django-csp)
]

PRODUCTION = config('DJANGO_PRODUCTION', default=False, cast=bool)

if PRODUCTION:
    INSTALLED_APPS = [app for app in INSTALLED_APPS if app not in [
        'tailwind',
        'theme',
        'django_browser_reload',
    ]]


if PRODUCTION:
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': config('REDIS_URL', default='redis://localhost:6379/0'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
    }

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "django_browser_reload.middleware.BrowserReloadMiddleware",
    # AxesMiddleware should be the last middleware in the MIDDLEWARE list
    'axes.middleware.AxesMiddleware',
]
MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')

ROOT_URLCONF = 'mec_portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

TAILWIND_APP_NAME = 'theme'
INTERNAL_IPS = [
    "127.0.0.1",
]

NPM_BIN_PATH = config('NPM_BIN_PATH', default='C:/Program Files/nodejs/npm.cmd')

WSGI_APPLICATION = 'mec_portal.wsgi.application'

# Security settings for production
# In production, set DJANGO_PRODUCTION=True as an environment variable
if os.environ.get('DJANGO_PRODUCTION', 'False') == 'True':
    # Ensures all non-HTTPS requests are redirected to HTTPS
    SECURE_SSL_REDIRECT = True
    
    # HSTS settings to enforce HTTPS in browsers
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # Apply HSTS to all subdomains
    SECURE_HSTS_PRELOAD = True  # Allow preloading in browsers
    
    # Trust the X-Forwarded-Proto header from the proxy
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    
    # WARNING: Only set this if you're behind a proper proxy that sets this header!
    # Setting this in an insecure environment can lead to security vulnerabilities
    import warnings
    warnings.warn(
        "SECURE_PROXY_SSL_HEADER is set. Ensure you're behind a secure proxy "
        "that correctly sets the X-Forwarded-Proto header."
    )
    
    # Referrer policy restricts information sent in Referer header
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
    
    # XSS protection and Content-Type sniffing prevention
    SECURE_BROWSER_XSS_FILTER = True  # Enable XSS filtering in browsers
    SECURE_CONTENT_TYPE_NOSNIFF = True  # Prevent MIME type sniffing
    
    # Cookie security settings
    SESSION_COOKIE_SECURE = True  # Send cookies only over HTTPS
    CSRF_COOKIE_SECURE = True  # Send CSRF cookies only over HTTPS
    CSRF_COOKIE_HTTPONLY = True  # Prevent JavaScript access to CSRF cookie
    
    # Prevent site from being embedded in iframes on other domains
    X_FRAME_OPTIONS = 'DENY'
else:
    # Development setting for referrer policy (still good to have in dev)
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# Content Security Policy (CSP) settings
# CSP headers define allowed sources for various content types
# This helps prevent XSS attacks by restricting what resources can be loaded
if os.environ.get('DJANGO_PRODUCTION', 'False') == 'True':
    # Use the django-csp package (needs to be installed: pip install django-csp)
    MIDDLEWARE.append('csp.middleware.CSPMiddleware')
    
    # Default CSP settings - customize these based on your needs
    CSP_DEFAULT_SRC = ("'self'",)  # Only allow resources from the same origin by default
    CSP_STYLE_SRC = ("'self'", "'unsafe-inline'")  # Allow inline styles and from same origin
    CSP_SCRIPT_SRC = ("'self'",)  # Only allow scripts from same origin
    CSP_IMG_SRC = ("'self'", "data:")  # Allow images from same origin and data URIs
    CSP_FONT_SRC = ("'self'",)  # Allow fonts from same origin
    CSP_CONNECT_SRC = ("'self'",)  # Allow connections to same origin
    CSP_FRAME_SRC = ("'none'",)  # Don't allow framing
    CSP_REPORT_URI = None  # Set to a URL to receive reports of CSP violations
    
    # Add Permissions-Policy header (formerly Feature-Policy)
    # This restricts what browser features your site can use
    PERMISSIONS_POLICY = {
        'geolocation': '()',  # Don't allow geolocation
        'microphone': '()',   # Don't allow microphone access
        'camera': '()',       # Don't allow camera access
        'payment': '()',      # Don't allow payment API
    }

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Add database configuration for production:
if config('DATABASE_URL', default=None):
    DATABASES['default'] = dj_database_url.parse(config('DATABASE_URL'))
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        # Validates that the password isn't too similar to the username, email, etc.
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        'OPTIONS': {
            'user_attributes': ('username', 'email', 'first_name', 'last_name'),
            'max_similarity': 0.7,  # Default is 0.7
        }
    },
    {
        # Validates that the password meets a minimum length
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,  # Require at least 8 characters
        }
    },
    {
        # Validates that the password isn't a commonly used password
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        # Validates that the password isn't entirely numeric
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Password reset link expiration time (in seconds)
PASSWORD_RESET_TIMEOUT = 86400  # 24 hours


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files configuration (for user uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Static files for production
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


PWA_SERVICE_WORKER_PATH = os.path.join(BASE_DIR, 'static/js', 'sw.js')
PWA_APP_NAME = 'MEC Portal'
PWA_APP_DESCRIPTION = 'MEC Portal'
PWA_APP_THEME_COLOR = '#3B82F6'
PWA_APP_BACKGROUND_COLOR = '#f9fafb'
PWA_APP_DISPLAY = 'standalone'
PWA_APP_START_URL = '/users/dashboard'
PWA_APP_STATUS_BAR_COLOR = 'default'
PWA_APP_SCOPE = '/users/dashboard'
PWA_APP_ORIENTATION = 'any'
PWA_APP_ICONS = [
    {
        'src': '/static/images/icon-192.png',
        'sizes': '192x192',
        'type': 'image/png',
    }
]
PWA_APP_ICONS_APPLE = [
    {
        'src': '/static/images/icon-192.png',
        'sizes': '192x192',
        'type': 'image/png',
    }
]
PWA_APP_SPLASH_SCREEN = [
    {
        'src': '/static/images/icon.png',
        'media': '(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)'
    }
]
PWA_APP_DIR = 'ltr'
PWA_APP_LANG = 'en-US'
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication settings
# Custom user model
AUTH_USER_MODEL = 'users.User'

# Login/logout URLs and redirects
LOGIN_URL = 'users:login'  # URL where login form is located
LOGIN_REDIRECT_URL = 'users:dashboard'  # Where to redirect after successful login
LOGOUT_REDIRECT_URL = 'users:login'  # Where to redirect after logout
LOGIN_REQUIRED_REDIRECT_FIELD_NAME = 'next'  # Parameter name for redirect after login

# Session security settings
SESSION_COOKIE_AGE = 3600  # 1 hour in seconds - shorter sessions are more secure
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Session expires when browser is closed
SESSION_SAVE_EVERY_REQUEST = True  # Renew session on every request, updating last activity time

# SameSite cookie setting to prevent CSRF attacks
SESSION_COOKIE_SAMESITE = 'Lax'  # 'Lax' allows the cookie to be sent with top-level navigations
CSRF_COOKIE_SAMESITE = 'Lax'  # Helps prevent CSRF in modern browsers

# Set session security based on production status
if os.environ.get('DJANGO_PRODUCTION', 'False') == 'True':
    # In production, use 'Strict' for maximum security
    SESSION_COOKIE_SAMESITE = 'Strict'
    CSRF_COOKIE_SAMESITE = 'Strict'

# Authentication backends for axes
AUTHENTICATION_BACKENDS = [
    # AxesStandaloneBackend should be the first backend in the AUTHENTICATION_BACKENDS list
    'axes.backends.AxesStandaloneBackend',
    # Django's default authentication backend
    'django.contrib.auth.backends.ModelBackend',
]

# Django Axes settings for brute force protection (rate limiting)
# These settings help protect against password guessing attacks
AXES_FAILURE_LIMIT = 5  # Number of login attempts before lockout
AXES_LOCKOUT_TIMEOUT = 30  # Lock out time in minutes
AXES_RESET_ON_SUCCESS = True  # Reset the counter after successful login
AXES_LOCKOUT_TEMPLATE = 'users/lockout.html'  # Template to show when locked out
AXES_COOLOFF_TIME = 0.5  # Half an hour lockout time (in hours)
# AXES_USE_USER_AGENT = True  # Include user-agent in the cache key for better tracking
AXES_LOCKOUT_PARAMETERS = ['username', 'ip_address', 'user_agent']  # Lock by username, IP, and user agent

# Log suspicious login attempts for security monitoring
AXES_ENABLE_ADMIN = True  # Enable Axes admin interface
AXES_VERBOSE = True  # Verbose logging for failed login attempts

# Email settings for password reset and notifications
# For development, use console backend to print emails to console
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# For production, use environment variables for sensitive email settings
if os.environ.get('DJANGO_PRODUCTION', 'False') == 'True':
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.example.com')
    EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
    EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
    
    # Default email address to use for various automated correspondence
    DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'mec@example.com')

# Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': config('DJANGO_LOG_FILE', default=str(BASE_DIR / 'django.log')),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}